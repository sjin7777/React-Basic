'use strict';

///* 1. 리액트는 무엇인가? */
if(true) {
    /* React */
    //      - A JavaScript library for building user interfaces (사용자 인터페이스를 만들기 위한 JS 라이브러리)
    //          > User Interface(UI): 사용자와 컴퓨터 프로그램이 서로 상호작용을 하기 위해 중간에서 서로간의 입력과 출력을 제어해주는 것
    //          > Library: 자주 사용되는 기능들을 정리해 모아 놓은 것
    //          > UI Library: 사용자 인터페이스를 만들기 위한 기능 모음집
    //      - React는 대표적인 JS UI Library (화면을 만들기 위한 기능들을 모아놓은 것)



    /* 웹 사이트를 구축할 때 대표적인 JS UI Library */
    // 1. AngularJS: 구글에서 만든 JS 기반의 웹 개발 오픈 소스 프레임워크
    // 2. React:    페이스북(현 Meta)에서 만든 JS 기반의 오픈 소스 UI 라이브러리
    // 3. Vue.js:   React와 항상 언급되는 JS 대표 프레임워크



    /* 프레임워크 vs. 라이브러리 */
    // 둘의 가장 큰 차이점은 프로그램 흐름에 대한 제어 권한
    // 1. 프레임워크 - 흐름의 제어 권한을 개발자가 아닌 프레임워크가 가지고 있음
    //               즉, 프레임워크는 제어 권한이 프레임워크. 자신에게 있음
    // 2. 라이브러리 - 흐름에 대한 제어를 하지 않고 개발자가 필요한 부분만 필요할 때 가져다 사용하는 형태 
    //               즉, 라이브러리는 제어 권한이 개발자에게 있음



    /* 웹 개발의 트렌드 */
    // 웹 사이트의 작동 원리와 흐름을 함께 이해하는 것이 중요하다



    /* 정리 */
    // - 리액트는 사용자와 웹 사이트의 상호 작용을 돕는 인터페이스를 만들기 위한 JS 기능 모음집
    // - 웹 사이트를 만들기 위해서는 HTML, CSS, JS 모두 잘 다뤄야 하는데, 사이트의 규모가 커지면 커질수록, 수많은 페이지를 잘 만들고, 관리하기 쉽지 않음
    //  그러한 복잡한 사이트를 쉽고 빠르게 만들며 관리하기 위해 만들어진 것이 React이다
    // - SPA란 하나의 페이지만 존재한 웹 사이트 또는 웹 애플리케이션을 의미
    // - 규모가 큰 웹 사이트의 경우 수백개의 페이지가 존재하는데, 이것을 각각 HTML 페이지로 만드는 것은 비효율적이며 관리하기 힘듦
    //  그래서 하나의 HTML 페이지를 만들어놓고, 사용자가 특정 페이지를 요청할 때, 그 안에 해당 페이지의 내용을 채워서 보내주는 것이 SPA이다
    // - React는 이러한 SPA를 쉽고 빠르게 만들 수 있도록 해주는 도구이다
}


///* 2. 리액트의 장점과 단점 */
if(true) {
    /* 리액트의 장점 */
    // 1. 빠른 업데이트 & 렌더링 속도
    //      > 업데이트: 웹 사이트를 검색할 때, 화면에 나타나는 내용이 바뀌는 것

    // 2. Virtual DOM
    //  - 가상의 DOM
    //      > DOM: 웹 페이지를 정의하는 하나의 객체. 하나의 웹 사이트 정보를 모두 담고 있는 큰 그릇
    //          - 콘솔창에 document 입력하게 되면 나오는 것이 DOM
    //  - 웹 페이지와 실제 DOM 사이에서 중간 매개체 역할을 하는 것
    //  - 일반적으로 사용자와 상호작용하는 웹 페이지 같은 경우 화면의 업데이트가 수시로 이루어짐
    //      > 화면이 업데이트 된다는 것은 DOM이 수정된다는 말과 동일함
    //  - 기존의 방식으로 화면을 업데이트 하려면 DOM을 직접 수정해야 하는데, 이것은 성능에 영향을 미치고, 비용도 많이 듦 (수정할 부분을 DOM에서 모두 찾아야 하기 때문)
    //   반면에, React는 업데이트 해야할 최소한의 부분만을 찾아서 업데이트

    // 3. Component-Based
    //  - React에서는 모든 페이지가 Component(구성요소)로 되어있고, 하나의 Component는 또 다른 여러 Component의 조합으로 구성될 수 있음
    //  - 레고 블록 조립하듯 컴포넌트들을 모아서 개발 (마치 레고 블록들이 모여서 하나의 완성된 모형이 되는 것과 비슷함)

    // 4. 재사용성(Reusability)
    //  - 다시 사용이 가능한 성질
    //  > 장점  - 개발 기간이 단축됨
    //          - 유지보수가 용이함
    
    // 5. 리액트와 재사용성
    //  - React는 Component 구조로 되어있음. 이러한 각 Component들은 웹사이트 여러 곳에서 반복적으로 사용될 수 있음
    //   즉, 하나의 Component가 계속 재사용이 가능하다는 의미
    //  - 그렇기에 React Component를 개발할 때, 항상 쉽고 재사용이 가능한 형태로 개발하는 것이 중요함
    //   그래야 다른 웹 사이트를 개발할 때, 쉽고 빠르게 개발이 가능하기 때문
    
    // 6. Meta(페이스북)이라는 든든한 지원군이 있음
    //  - React는 Meta가 만든 오픈 소스 프로젝트임
    //  - 꾸준한 버전 업데이트가 이루어지며, 발전하고 있음

    // 7. 활발한 지식공유 & 커뮤니티
    
    // 8. React Native
    //  - React를 배운 이후 React Native 라는 모바일 환경 UI 프레임워크를 사용해서 모바일 앱을 개발할 수 있음



    /* 리액트의 단점 */
    // 1. 방대한 학습량
    
    // 2. 뭔가 계속 바뀜 => 또 새로 공부해야 됨
    //  - 새로운 버전이 나오면, 이에 대한 내용을 학습하고, 이해하고 있어야 실제 업무에서 원활하게 개발을 할 수 있음

    // 3. 높은 상태 관리 복잡도
    //  - 상태 관리의 기본 개념을 제대로 이해하는 것이 중요함
    

}